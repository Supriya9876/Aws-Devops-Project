version: 0.2

env:
  variables:
    ACCOUNT_ID: 535002878565
    REGION: us-east-1
    FRONTEND_REPO: three-tier-frontend
    BACKEND_REPO: three-tier-backend
    FRONTEND_DIR: frontend
    BACKEND_DIR: backend
    K8S_MANIFEST_DIR: k8s

phases:
  install:
    runtime-versions:
      nodejs: 18
      java: corretto17
    commands:
      - echo Installing utilities...
      - yum install -y jq

  pre_build:
    commands:
      - echo Setting dynamic image tag...
      # - export IMAGE_TAG=v1.${CODEBUILD_BUILD_NUMBER}
      # - echo IMAGE_TAG=$IMAGE_TAG
      - export IMAGE_TAG=latest
      - echo IMAGE_TAG=$IMAGE_TAG
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
      - echo Installing frontend dependencies...
      - cd $FRONTEND_DIR && npm install && cd -
      - echo Building backend with Maven...
      - cd $BACKEND_DIR && mvn clean package -DskipTests && cd -

  build:
    commands:
      - echo Building Docker images...
      - docker build -t $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_DIR || { echo "Frontend Docker build failed"; exit 1; }
      - docker tag $FRONTEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker build -t $BACKEND_REPO:$IMAGE_TAG $BACKEND_DIR || { echo "Backend Docker build failed"; exit 1; }
      - docker tag $BACKEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG
      - docker images

      - echo Running SonarQube scan...
      - cd $BACKEND_DIR && mvn clean verify sonar:sonar -Dsonar.projectKey=final-project -Dsonar.host.url=http://18.212.13.244 -Dsonar.login=sqp_dd9f0bffece8b47907435ccddd8683d430818644 && cd -

  post_build:
    commands:
      - echo Pushing Docker images to ECR...
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

      - echo Preparing Kubernetes manifest output directory...
      - mkdir -p k8s-out
      - touch k8s-out/.keep  # Prevent "directory not found" if no files copied

      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/frontend/deployment.yaml > k8s-out/frontend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/frontend/service.yaml k8s-out/frontend-service.yaml

      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/backend/deployment.yaml > k8s-out/backend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/backend/service.yaml k8s-out/backend-service.yaml

      - cp $K8S_MANIFEST_DIR/namespace.yaml k8s-out/namespace.yaml || true
      - cp $K8S_MANIFEST_DIR/database/pv.yaml k8s-out/database-pv.yaml || true
      - cp $K8S_MANIFEST_DIR/database/pvc.yaml k8s-out/database-pvc.yaml || true
      - cp $K8S_MANIFEST_DIR/database/app-config.yaml k8s-out/database-app-config.yaml || true
      - cp $K8S_MANIFEST_DIR/database/secrets.yaml k8s-out/database-secrets.yaml || true
      - cp $K8S_MANIFEST_DIR/database/deployment.yaml k8s-out/database-deployment.yaml || true
      - cp $K8S_MANIFEST_DIR/database/service.yaml k8s-out/database-service.yaml || true
      - cp $K8S_MANIFEST_DIR/ingress.yaml k8s-out/ingress.yaml || true

      - echo "Final list of generated Kubernetes YAML files:"
      - find k8s-out/

artifacts:
  base-directory: k8s-out
  discard-paths: yes
  files:
    - '**/*.yaml'

cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'backend/.m2/**/*'
